{"version":3,"file":"index.modern.mjs","sources":["../src/regexUtil/index.ts","../src/stringUtil/index.ts","../src/envUtil/index.ts","../src/objectUtil/index.ts"],"sourcesContent":["export const getType = <T>(obj: T): string => (Object.prototype.toString.call(obj)).match(/\\w+\\s(\\w+)/)![1].toLowerCase();\n","import { getType } from \"../regexUtil\";\n\nexport const capitalizeFirstWordInSentence = (sentence: string | any): string | any => {\n    if (typeof sentence === 'string' || sentence instanceof String) {\n        if (sentence.trim().length) {\n            const phraseFromSentence = sentence.split('. ');\n            return phraseFromSentence.map((phrase) => phrase.charAt(0).toUpperCase() + phrase.slice(1)).join('. ');\n        }\n        return '';\n    }\n    return sentence;\n};\n\nexport const isNonEmptyString = (anyData: any): boolean => typeof anyData === 'string' && anyData.trim() !== '';\n\nexport const isSameText = (\n    firstText: string,\n    secondText: string,\n    caseInsensitive = true\n) => {\n    if (getType(firstText) === 'string' && getType(firstText) === 'string') {\n        if (caseInsensitive) {\n            return firstText.toLowerCase() === secondText.toLowerCase();\n        }\n        return firstText === secondText;\n    }\n    return false;\n};\n","export const isTestEnv = process.env['NODE_DEV'] = 'TEST';","/* eslint-disable no-restricted-syntax */\nimport { isTestEnv } from '../envUtil';\nimport { getType } from '../regexUtil';\nimport { isSameText } from '../stringUtil';\n\nconst isObject = <T>(obj: T) => getType(obj) === 'object';\n\nconst circularReplacer = () => {\n    const seen = new WeakSet();\n    return (key: string, value: any) => {\n        if (typeof value === 'object' && value !== null) {\n            if (seen.has(value)) {\n                return;\n            }\n            seen.add(value);\n        }\n        return value;\n    };\n};\n\nexport const deepCloneWithoutCircularReferences = <T>(obj: T) => JSON.parse(JSON.stringify(obj, circularReplacer()));\n\ntype CacheItem = {\n    original: any,\n    copy: any\n}\n\n// backward compatible deep copy, circular references allowed\nconst newCopyHelper = <T>(obj: T) => Array.isArray(obj) ? new Array() : Object.assign({});\n\nexport const recursiveDeepClone = <T>(obj: T, cacheList: CacheItem[] = []): T => {\n    const inputType = getType(obj)\n    // just return if obj is immutable value\n    if (['object', 'array'].indexOf(inputType) === -1) {\n        return obj;\n    }\n\n    // if obj is hit, it is in circular structure\n    const circularStructure = cacheList.find((c) => c.original === obj);\n    if (circularStructure) {\n        return circularStructure.copy;\n    }\n\n    const copy = newCopyHelper(obj);\n    // put the copy into cache at first\n    // because we want to refer it in recursive deep copy\n    cacheList.push({ original: obj, copy });\n\n    Object.keys(obj as [] | Record<string, any>).forEach((key) => {\n        const idx = parseInt(key)\n        if (Number.isNaN(idx)) {\n            copy[key] = recursiveDeepClone((obj as Record<string, any>)[key], cacheList);\n        } else {\n            copy[key] = recursiveDeepClone((obj as [])[idx], cacheList);\n        }\n    });\n\n    return <T>copy;\n};\n\n// deep copy obj with circular references using JSON.parse(JSON.stringfy(obj)) will fail\n// this is the better way to handle that\nconst deepClone = <T>(obj: T) => {\n    try {\n        // https://developer.mozilla.org/en-US/docs/Web/API/structuredClone\n        return structuredClone(obj);\n    } catch {\n        // old browser or node env below v. 17 will not have structuredClone\n        return recursiveDeepClone(obj);\n    }\n};\n\nmodule.exports.isObject = isObject\nmodule.exports.deepClone = deepClone\nif (isTestEnv) {\n    module.exports.newCopyHelper = newCopyHelper\n}"],"names":["getType","obj","Object","prototype","toString","call","match","toLowerCase","sentence","String","trim","length","split","map","phrase","charAt","toUpperCase","slice","join","anyData","firstText","secondText","caseInsensitive","isTestEnv","process","env","newCopyHelper","Array","isArray","assign","recursiveDeepClone","cacheList","inputType","indexOf","find","c","original","circularStructure","copy","push","keys","forEach","key","idx","parseInt","Number","isNaN","module","exports","isObject","deepClone","structuredClone","_unused","JSON","parse","stringify","seen","value","has","add","circularReplacer"],"mappings":"AAAO,MAAaA,EAAOC,GAAoBC,OAAOC,UAAUC,SAASC,KAAKJ,GAAMK,MAAM,cAAe,GAAGC,+FCE9DC,GAClB,iBAAbA,GAAyBA,aAA0BC,OACtDD,EAASE,OAAOC,OACWH,EAASI,MAAM,MAChBC,IAAKC,GAAWA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,IAAIC,KAAK,MAE9F,GAEJV,mBAGsBW,GAA6C,oBAA+B,KAAnBA,EAAQT,kBAExE,CACtBU,EACAC,EACAC,GAAkB,IAES,WAAvBtB,EAAQoB,IAAkD,WAAvBpB,EAAQoB,KACvCE,EACgBF,EAACb,gBAAkBc,EAAWd,kBAE7Bc,ICxBtB,MAAeE,EAAGC,QAAQC,IAAc,SAAI,OC4B7CC,EAAoBzB,GAAW0B,MAAMC,QAAQ3B,GAAO,IAAW0B,MAAGzB,OAAO2B,OAAO,IAEvDC,EAAG,CAAI7B,EAAQ8B,EAAyB,MACnE,MAAMC,EAAYhC,EAAQC,GAE1B,IAAgD,IAA5C,CAAC,SAAU,SAASgC,QAAQD,GAC5B,SAIJ,QAA0BD,EAAUG,KAAMC,GAAMA,EAAEC,WAAanC,GAC/D,GAAIoC,EACA,SAAyBC,KAG7B,QAAaZ,EAAczB,GAc3B,OAXA8B,EAAUQ,KAAK,CAAEH,SAAUnC,EAAKqC,SAEhCpC,OAAOsC,KAAKvC,GAAiCwC,QAASC,IAClD,MAASC,EAAGC,SAASF,GAEjBJ,EAAKI,GADLG,OAAOC,MAAMH,GACDb,EAAoB7B,EAA4ByC,GAAMX,GAEtDD,EAAoB7B,EAAW0C,GAAMZ,EACpD,GAGKO,GAedS,OAAOC,QAAQC,SAnEMhD,GAA4B,WAAjBD,EAAQC,GAoExC8C,OAAOC,QAAQE,UAXOjD,IAClB,IAEI,OAAsBkD,gBAAClD,EAI1B,CAHC,MAAMmD,GAEJ,OAAOtB,EAAmB7B,EAC7B,GAKDsB,IACAwB,OAAOC,QAAQtB,cAAgBA,4DAvDmBzB,GAAWoD,KAAKC,MAAMD,KAAKE,UAAUtD,EAblE,MACrB,MAAMuD,EAAO,YACb,MAAO,CAACd,EAAae,KACjB,GAAqB,iBAALA,GAA2B,OAAVA,EAAgB,CAC7C,GAAID,EAAKE,IAAID,GACT,OAEJD,EAAKG,IAAIF,EACZ,CACD,OAAOA,EACX,EAG4FG"}